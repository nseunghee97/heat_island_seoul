group_by(온도) %>%
summarise_all(mean)
island@data
temperature %>%
mutate(열섬 = ifelse(avg_tmp < 33, "일반",
ifelse(label==0, "열섬0",
ifelse(label==1, '열섬1',
ifelse(label==2, '열섬2', '열섬3'))))) %>%
group_by(열섬) %>%
select(targets) %>%
summarise_all(mean)
temperature %>%
mutate(열섬 = ifelse(avg_tmp < 33, "일반",
ifelse(label==0, "0",
ifelse(label==1, '1',
ifelse(label==2, '2', '3'))))) %>%
group_by(열섬) %>%
select(targets) %>%
summarise_all(mean)
knitr::opts_chunk$set(echo = TRUE)
file1_rescale <- read.csv('최종본_rescale.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
getwd()
setwd("Code")
file1_rescale <- read.csv('최종본_rescale.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
file2_rescale <- read.csv('최종본_변수정리_rescale.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
file1_rescale2 <- read.csv('최종본_rescale2.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
file2_rescale2 <- read.csv('최종본_변수정리_rescale2.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
## 클러스터1들의 상관관계와 varImPlot 보기
c1_rescale <- file1_rescale %>% select(-fid) %>% filter(label == 0)
library(car)
library(MASS)
library(randomForest)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(lmtest)
library(corrplot)
## 클러스터1들의 상관관계와 varImPlot 보기
c1_rescale <- file1_rescale %>% select(-fid) %>% filter(label == 0)
c2_rescale <- file2_rescale %>% select(-fid) %>% filter(label == 0)
c1_rescale2 <- file1_rescale2 %>% select(-fid) %>% filter(label == 0)
c2_rescale2 <- file2_rescale2 %>% select(-fid) %>% filter(label == 0)
# 1-1) c1_rescale
data0 <- c1_rescale %>% select(-label,-min_tmp,-max_tmp)
head(data0) # 암벽/석산(임지), 공업나지(도시), 가축/사육(도시), 공원묘지(임지), 과수원(농지) == 0
head(data0) # 암벽/석산(임지), 공업나지(도시), 가축/사육(도시), 공원묘지(임지), 과수원(농지) == 0
library(caret)
install.packages("caret")
# Split the data into training and test set
training.samples <- data0 %>% select(-avg_tmp) %>%
createDataPartition(p = 0.8, list = FALSE)
library(caret)
# Split the data into training and test set
training.samples <- data0 %>% select(-avg_tmp) %>%
createDataPartition(p = 0.8, list = FALSE)
# Split the data into training and test set
training.samples <- data0 %>% select(-avg_tmp) %>%
createFolds(p = 0.8, list = FALSE)
# Split the data into training and test set
training.samples <- data0 %>% select(-avg_tmp) %>%
createFolds()
data0 %>% nrow
# Split the data into training and test set
training.samples <- data0 %>% select(-avg_tmp) %>%
createFolds(k=10)
# Split the data into training and test set
idx <- data0 %>% select(-avg_tmp) %>%
createFolds(k=10)
idx
# Split the data into training and test set
idx <- data0 %>% select(-avg_tmp) %>%
createFolds(k=5)
idx
# Split the data into training and test set
idx <- data$avg_tmp) %>% createFolds(k=5)
# Split the data into training and test set
idx <- data$avg_tmp %>% createFolds(k=5)
# Split the data into training and test set
idx <- data0$avg_tmp %>% createFolds(k=5)
idx
for (id in idx) print(id %>% length)
# Split the data into training and test set
folds <- data0$avg_tmp %>% createFolds(k=5)
RMSE <- sapply(folds, function (idx) {
df.train.i <- data0[-idx, ]
df.test.i <- data0[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = RMSE(y.hay.i,y.i)
return(score)
})
RMSE <- sapply(folds, function (idx) {
df.train.i <- data0[-idx, ]
df.test.i <- data0[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = RMSE(y.hat.i,y.i)
return(score)
})
RMSE
RMSE %>% mean()
R2 <- sapply(folds, function (idx) {
df.train.i <- data0[-idx, ]
df.test.i <- data0[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = R2(y.hat.i,y.i)
return(score)
})
RMSE %>% mean()
R2 %>% mean()
data0 = file1_rescale %>% select(-fid)
# Split the data into training and test set
folds <- data0$avg_tmp %>% createFolds(k=5)
R2 <- sapply(folds, function (idx) {
df.train.i <- data0[-idx, ]
df.test.i <- data0[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = R2(y.hat.i,y.i)
return(score)
})
R2 %>% mean()
RMSE <- sapply(folds, function (idx) {
df.train.i <- data0[-idx, ]
df.test.i <- data0[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = RMSE(y.hat.i,y.i)
return(score)
})
RMSE <- sapply(folds, function (idx) {
df.train.i <- data0[-idx, ]
df.test.i <- data0[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = RMSE(y.hat.i,y.i)
return(score)
})
R2 %>% mean()
RMSE %>% mean
sampled %>% nrow
knitr::opts_chunk$set(echo = TRUE)
train = read.csv("data/panel/train.csv")
train = read.csv("data/panel/train.csv")
test = read.csv("data/panel/test.csv")
test_fin= read_csv("test_fin.csv")%>% select(-X1)
sampled = train_fin[sample(nrow(train_fin),1000),]
train_fin = read_csv("train_fin.csv") %>% select(-X1)
train_fin = read_csv("train_fin.csv") %>% select(-X1)
test_fin= read_csv("test_fin.csv")%>% select(-X1)
sampled = train_fin[sample(nrow(train_fin),1000),]
sampled %>% nrow
runtime = system.time(caret::train(values ~., data=sampled, method="ctree")){}
runtime = system.time({caret::train(values ~., data=sampled, method="ctree")})
runtime = system.time({caret::train(values ~., data=sampled, method="ctree")})
runtime
runtime = system.time({model = caret::train(values ~., data=sampled, method="ctree")})
runtime
model
y_pred = model %>% predict(test_fin %>% select(-values))
score = smape(test_fin$values,y_pred)
library(Metrics)
score = smape(test_fin$values,y_pred)
print(score)
runtime
set.seed(1)
data0 = file1_rescale %>% select(-fid)
# Split the data into training and test set
folds <- data0$avg_tmp %>% createFolds(k=5)
RMSE <- sapply(folds, function (idx) {
df.train.i <- data0[-idx, ]
df.test.i <- data0[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = RMSE(y.hat.i,y.i)
return(score)
})
RMSE <- sapply(folds, function (idx) {
df.train.i <- data0[-idx, ]
df.test.i <- data0[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = RMSE(y.hat.i,y.i)
return(score)
})
RMSE %>% mean()
RMSE %>% mean()
RF = randomForest(avg_tmp~., data0, importance=T)
importance(m_random)
importance(RF)
file2_rescale <- read.csv('최종본_변수정리_rescale.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
data0 = file2_rescale
data0 %>% colnames()
data0 = file2_rescale %>% select(-fid, -max_tmp, -min_tmp)
RF = randomForest(avg_tmp~., data0, importance=T)
varImpPlot(m_random,main='varlmPlot of 변수정리X_cluster1_rescale')
varImpPlot(RF)
# 1-2) c1_rescale2
data1 <- c1_rescale2 %>% select(-label,-min_tmp,-max_tmp)
head(data1)
data1 %>% head
data1 %>% nrow
################
### 그리드화 ###
################
#setwd('C:/Users/요우용/Desktop/데사입_프로젝트/그리드화')
file1_rescale <- read.csv('최종본_rescale.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
file2_rescale <- read.csv('최종본_변수정리_rescale.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
file1_rescale2 <- read.csv('최종본_rescale2.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
file2_rescale2 <- read.csv('최종본_변수정리_rescale2.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
## 클러스터1들의 상관관계와 varImPlot 보기
c1_rescale <- file1_rescale %>% select(-fid) %>% filter(label == 0)
c2_rescale <- file2_rescale %>% select(-fid) %>% filter(label == 0)
c1_rescale2 <- file1_rescale2 %>% select(-fid) %>% filter(label == 0)
c2_rescale2 <- file2_rescale2 %>% select(-fid) %>% filter(label == 0)
# 1-1) c1_rescale
data0 <- c1_rescale %>% select(-label,-min_tmp,-max_tmp)
head(data0) # 암벽/석산(임지), 공업나지(도시), 가축/사육(도시), 공원묘지(임지), 과수원(농지) == 0
data0 %>% head
data0 %>% nrow
set.seed(1)
m_random <- randomForest(avg_tmp~.,data=data0,importance=T)
m_random
importance(m_random)
varImpPlot(m_random,main='varlmPlot of 변수정리X_cluster1_rescale')
varImpPlot(m_random,main='varlmPlot of 변수정리X_cluster1_rescale')
# 1-2) c1_rescale2
data1 <- c1_rescale2 %>% select(-label,-min_tmp,-max_tmp)
head(data1)
corr1 <- cor(data1)
corrplot(corr1)
set.seed(1)
m_random <- randomForest(avg_tmp~.,data=data1,importance=T)
m_random
importance(m_random)
varImpPlot(m_random,main='varlmPlot of 변수정리X_cluster1_rescale2')
varImpPlot(m_random,main='varlmPlot of 변수정리X_cluster1_rescale')
# 2-1) c2_rescale
data2 <- c2_rescale %>% select(-label,-min_tmp,-max_tmp)
head(data2) # 공업나지(도시), 매립지(도시) == 0
corr2 <- cor(data2)
corrplot(corr2)
set.seed(1)
m_random <- randomForest(avg_tmp~.,data=data2,importance=T)
m_random
importance(m_random)
varImpPlot(m_random,main='varlmPlot of 변수정리O_cluster1_rescale')
# 2-2) c2_rescale2
data3 <- c2_rescale2 %>% select(-label,-min_tmp,-max_tmp)
head(data3) # 발전시설(도시), 경지정리답(농지), 가축/사육시설(도시), 매립지(도시) == 0
corr3 <- cor(data3)
corrplot(corr3)
set.seed(1)
m_random <- randomForest(avg_tmp~.,data=data3,importance=T)
m_random
importance(m_random)
varImpPlot(m_random,main='varlmPlot of 변수정리O_cluster1_rescale2')
data4 <- data1 %>% select(-max_ele,-min_ele,-diff_ele,-max_dust_10,-min_dust_10,-X80m_wind_speed,-인공녹지.도시._비율,
-자연초지.임지._비율,-인공초지.임지._비율,-경지정리답.농지._비율)
corr4 <- cor(data4)
corrplot(corr3)
corr4
set.seed(1)
m_random <- randomForest(avg_tmp~.,data=data4,importance=T)
m_random # 32.13
varImpPlot(m_random,main='varlmPlot of 변수정리O_cluster1_rescale2 변수 일부 삭제')
vars <- importance(m_random)[,'%IncMSE']
library(car)
library(MASS)
library(randomForest)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(lmtest)
library(corrplot)
## 클러스터별 비교
setwd('C:/Users/요우용/Desktop/데사입_프로젝트/그리드화')
## 클러스터별 비교
#setwd('C:/Users/요우용/Desktop/데사입_프로젝트/그리드화')
file1 <- read.csv('최종본.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
head(file1)
# 1) 평균온도
mean_tmp <- file1 %>% group_by(label) %>% summarize(mean_tmp = mean(avg_tmp))
ggplot(mean_tmp) + geom_col(aes(x=as.factor(label),y=mean_tmp,group=as.factor(label)))
# 2) 평균고도
mean_ele <- file1 %>% group_by(label) %>% summarize(mean_ele = mean(avg_ele))
ggplot(mean_ele) + geom_col(aes(x=as.factor(label),y=mean_ele,fill=as.factor(label)))
# 3) 평균 바람 10m
mean_wind_10 <- file1 %>% group_by(label) %>% summarize(mean_wind = mean(X10m_wind_speed))
ggplot(mean_wind_10) + geom_col(aes(x=as.factor(label),y=mean_wind,fill=as.factor(label)))
# 4) 평균 바람 80m
mean_wind_80 <- file1 %>% group_by(label) %>% summarize(mean_wind = mean(X80m_wind_speed))
ggplot(mean_wind_80) + geom_col(aes(x=as.factor(label),y=mean_wind,fill=as.factor(label)))
# 5) 풍속의 차이
mean_diff <- file1 %>% group_by(label) %>% summarize(mean_wind = mean(difference_wind))
ggplot(mean_diff) + geom_col(aes(x=as.factor(label),y=mean_wind,fill=as.factor(label)))
# 6) 평균 미세먼지 차이
mean_dust <- file1 %>% group_by(label) %>% summarize(mean_dust = mean(avg_dust_10))
ggplot(mean_dust) + geom_col(aes(x=as.factor(label),y=mean_dust,fill=as.factor(label)))
# 7) 순수 불량비율
mean_bad <- file1 %>% group_by(label) %>% summarize(mean_bad = mean(순수불량_비율))
ggplot(mean_bad) + geom_col(aes(x=as.factor(label),y=mean_bad,fill=as.factor(label)))
################
### 그리드화 ###
################
setwd('C:/Users/요우용/Desktop/데사입_프로젝트/그리드화')
file1_rescale <- read.csv('최종본_rescale.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
file2_rescale <- read.csv('최종본_변수정리_rescale.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
file1_rescale2 <- read.csv('최종본_rescale2.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
file2_rescale2 <- read.csv('최종본_변수정리_rescale2.csv',header=T,stringsAsFactors=F,fileEncoding='utf-8')
## 클러스터1들의 상관관계와 varImPlot 보기
c1_rescale <- file1_rescale %>% select(-fid) %>% filter(label == 0)
c2_rescale <- file2_rescale %>% select(-fid) %>% filter(label == 0)
c1_rescale2 <- file1_rescale2 %>% select(-fid) %>% filter(label == 0)
c2_rescale2 <- file2_rescale2 %>% select(-fid) %>% filter(label == 0)
# 1-1) c1_rescale
data0 <- c1_rescale %>% select(-label,-min_tmp,-max_tmp)
head(data0) # 암벽/석산(임지), 공업나지(도시), 가축/사육(도시), 공원묘지(임지), 과수원(농지) == 0
corr0 <- cor(data0)
corr0
corrplot(corr0)
set.seed(1)
m_random <- randomForest(avg_tmp~.,data=data0,importance=T)
m_random
importance(m_random)
varImpPlot(m_random,main='varlmPlot of 변수정리X_cluster1_rescale')
# 1-2) c1_rescale2
data1 <- c1_rescale2 %>% select(-label,-min_tmp,-max_tmp)
head(data1)
corr1 <- cor(data1)
corrplot(corr1)
set.seed(1)
m_random <- randomForest(avg_tmp~.,data=data1,importance=T)
m_random
importance(m_random)
varImpPlot(m_random,main='varlmPlot of 변수정리X_cluster1_rescale2')
# 2-1) c2_rescale
data2 <- c2_rescale %>% select(-label,-min_tmp,-max_tmp)
head(data2) # 공업나지(도시), 매립지(도시) == 0
corr2 <- cor(data2)
corrplot(corr2)
set.seed(1)
m_random <- randomForest(avg_tmp~.,data=data2,importance=T)
m_random
importance(m_random)
varImpPlot(m_random,main='varlmPlot of 변수정리O_cluster1_rescale')
# 2-2) c2_rescale2
data3 <- c2_rescale2 %>% select(-label,-min_tmp,-max_tmp)
head(data3) # 발전시설(도시), 경지정리답(농지), 가축/사육시설(도시), 매립지(도시) == 0
corr3 <- cor(data3)
corrplot(corr3)
set.seed(1)
m_random <- randomForest(avg_tmp~.,data=data3,importance=T)
m_random
importance(m_random)
varImpPlot(m_random,main='varlmPlot of 변수정리O_cluster1_rescale2')
data4 <- data1 %>% select(-max_ele,-min_ele,-diff_ele,-max_dust_10,-min_dust_10,-X80m_wind_speed,-인공녹지.도시._비율,
-자연초지.임지._비율,-인공초지.임지._비율,-경지정리답.농지._비율)
corr4 <- cor(data4)
corrplot(corr3)
corr4
set.seed(1)
m_random <- randomForest(avg_tmp~.,data=data4,importance=T)
m_random # 32.13
varImpPlot(m_random,main='varlmPlot of 변수정리O_cluster1_rescale2 변수 일부 삭제')
vars <- importance(m_random)[,'%IncMSE']
vars_df <-as.data.frame(vars)
vars_df # %IncMSE data.frame
folds <- data4$avg_tmp %>% createFolds(k=5)
RMSE <- sapply(folds, function (idx) {
df.train.i <- data4[-idx, ]
df.test.i <- data4[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = RMSE(y.hat.i,y.i)
return(score)
})
RMSE %>% mean()
R2 <- sapply(folds, function (idx) {
df.train.i <- data4[-idx, ]
df.test.i <- data4[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = R2(y.hat.i,y.i)
return(score)
})
R2 %>% mean()
RMSE %>% mean()
R2 <- sapply(folds, function (idx) {
df.train.i <- data4[-idx, ]
df.test.i <- data4[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = R2(y.hat.i,y.i)
return(score)
})
RMSE <- sapply(folds, function (idx) {
df.train.i <- data4[-idx, ]
df.test.i <- data4[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = R2(y.hat.i,y.i)
return(score)
})
R2 %>% mean()
RMSE %>% mean()
R2 <- sapply(folds, function (idx) {
df.train.i <- data4[-idx, ]
df.test.i <- data4[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = R2(y.hat.i,y.i)
return(score)
})
RMSE <- sapply(folds, function (idx) {
df.train.i <- data4[-idx, ]
df.test.i <- data4[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = RMSE(y.hat.i,y.i)
return(score)
})
R2 %>% mean()
RMSE %>% mean()
tmp = file1_rescale %>%
select(-max_ele,-min_ele,-diff_ele,-max_dust_10,-min_dust_10,-X80m_wind_speed,-인공녹지.도시._비율,
-자연초지.임지._비율,-인공초지.임지._비율,-경지정리답.농지._비율)
tmp %>% columns
tmp %>% colnames
tmp = file1_rescale %>%
select(-label,-min_tmp,-max_tmp,, -max_ele,-min_ele,-diff_ele,-max_dust_10,-min_dust_10,-X80m_wind_speed,-인공녹지.도시._비율,
-자연초지.임지._비율,-인공초지.임지._비율,-경지정리답.농지._비율)
tmp = file1_rescale %>%
select(-label,
-min_tmp,
-max_tmp,-max_ele,-min_ele,-diff_ele,-max_dust_10,-min_dust_10,-X80m_wind_speed,-인공녹지.도시._비율,
-자연초지.임지._비율,-인공초지.임지._비율,-경지정리답.농지._비율)
folds <- tmp$avg_tmp %>% createFolds(k=5)
R2 <- sapply(folds, function (idx) {
df.train.i <- tmp[-idx, ]
df.test.i <- tmp[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = R2(y.hat.i,y.i)
return(score)
})
RMSE <- sapply(folds, function (idx) {
df.train.i <- tmp[-idx, ]
df.test.i <- tmp[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = RMSE(y.hat.i,y.i)
return(score)
})
R2 %>% mean()
RMSE %>% mean()
data4 %>% colnames
varImpPlot(m_random,main='varlmPlot of 변수정리O_cluster1_rescale2 변수 일부 삭제')
data4 %>% nrow
tmp %>% colnames()
tmp = tmp %>% select(-tmp)
tmp = tmp %>% select(-fid)
m_random <- randomForest(avg_tmp~.,data=tmp,importance=T)
m_random # 32.13
varImpPlot(m_random,main='varlmPlot of 변수정리O_cluster1_rescale2 변수 일부 삭제')
folds <- tmp$avg_tmp %>% createFolds(k=5)
tmp = file1_rescale %>%
select(-label,
-min_tmp,
-fid,
-max_tmp,-max_ele,-min_ele,-diff_ele,-max_dust_10,-min_dust_10,-X80m_wind_speed,-인공녹지.도시._비율,
-자연초지.임지._비율,-인공초지.임지._비율,-경지정리답.농지._비율)
folds <- tmp$avg_tmp %>% createFolds(k=5)
R2 <- sapply(folds, function (idx) {
df.train.i <- tmp[-idx, ]
df.test.i <- tmp[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = R2(y.hat.i,y.i)
return(score)
})
RMSE <- sapply(folds, function (idx) {
df.train.i <- tmp[-idx, ]
df.test.i <- tmp[idx, ]
model.i <- randomForest(avg_tmp ~ ., data=df.train.i)
y.i <- df.test.i$avg_tmp
y.hat.i <- predict(model.i, newdata=df.test.i)
score = RMSE(y.hat.i,y.i)
return(score)
})
R2 %>% mean()
RMSE %>% mean()
R2 %>% mean()
RMSE %>% mean()
